{"version":3,"sources":["pages/Chat/ChatPage.tsx"],"names":["ChatPage","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","Message","message","id","ref","React","memo","width","src","photo","alt","userName","userId","setMessage","value","onChange","target","disabled","onClick","sendMessagesListening"],"mappings":"yNAUaA,EAAqB,WAChC,OACE,8BACE,cAACC,EAAD,OAKAA,EAAiB,WACrB,IAAMC,EAAWC,cACXC,EAASC,aAAY,SAACC,GAAD,uBAAyBA,EAAMC,YAA/B,aAAyB,EAAYH,UAShE,OAPAI,qBAAU,WAER,OADAN,EAASO,eACF,WACLP,EAASQ,kBAEV,IAGD,gCACc,UAAXN,GACC,8EAEF,cAACO,EAAD,IACA,cAACC,EAAD,QAKAD,EAAqB,WACzB,IAAME,EAAWR,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAqBA,OANAV,qBAAU,WACW,IAAD,EAAdS,IACF,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAACR,IAGF,sBACES,MAAO,CAAEC,OAAQ,QAASC,UAAW,QACrCC,SAtBkB,SAACC,GACrB,IAAIC,EAAUD,EAAEE,cAEdC,KAAKC,IACHH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACjD,KAEHhB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWlC,UAIGL,EAASqB,KAAI,SAAAC,GAAC,OACb,cAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,OAElB,qBAAKC,IAAKzB,QAIVsB,EAAqDI,IAAMC,MAC/D,YAAkB,IAAfJ,EAAc,EAAdA,QACD,OACE,gCACE,qBACEf,MAAO,CAAEoB,MAAO,OAAQnB,OAAQ,IAChCoB,IAAG,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAASO,MACdC,IAAI,KAEN,uBACA,mCAAIR,QAAJ,IAAIA,OAAJ,EAAIA,EAASS,WACb,qCAAMT,QAAN,IAAMA,OAAN,EAAMA,EAASU,SACf,uBATF,OAUGV,QAVH,IAUGA,OAVH,EAUGA,EAASA,QACV,6BAMFzB,EAA2B,WAC/B,MAA8BI,mBAAS,IAAvC,mBAAOqB,EAAP,KAAgBW,EAAhB,KACM5C,EAASC,aAAY,SAACC,GAAD,uBAAyBA,EAAMC,YAA/B,aAAyB,EAAYH,UAC1DF,EAAWC,cAUjB,OACE,gCACE,8BACE,0BACE8C,MAAOZ,EACPa,SAAU,SAAAxB,GAAC,OAAIsB,EAAWtB,EAAEyB,OAAOF,YAGvC,8BACE,wBAAQG,SAAqB,UAAXhD,EAAoBiD,QAjBjB,WACpBhB,IAGLnC,EAASoD,YAAsBjB,IAC/BW,EAAW,MAYP","file":"static/js/6.5f6c96a7.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ChatMessageAPIType } from '../../api/chat-api'\nimport {\n  sendMessagesListening,\n  startMessagesListening,\n  stopMessagesListening\n} from '../../redux/chat-reducer'\nimport { AppStateType } from '../../redux/redux-store'\n\nexport const ChatPage: React.FC = () => {\n  return (\n    <div>\n      <Chat />\n    </div>\n  )\n}\n\nconst Chat: React.FC = () => {\n  const dispatch = useDispatch()\n  const status = useSelector((state: AppStateType) => state.chat?.status)\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, []) // eslint-disable-line\n\n  return (\n    <div>\n      {status === 'error' && (\n        <div>Some error occured. Please refresh the page</div>\n      )}\n      <Messages />\n      <AddMessageForm />\n    </div>\n  )\n}\n\nconst Messages: React.FC = () => {\n  const messages = useSelector((state: AppStateType) => state.chat.messages)\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\n  const [isAutoScroll, setIsAutoScroll] = useState(true)\n\n  const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\n    let element = e.currentTarget\n    if (\n      Math.abs(\n        element.scrollHeight - element.scrollTop - element.clientHeight\n      ) < 300\n    ) {\n      !isAutoScroll && setIsAutoScroll(true)\n    } else {\n      isAutoScroll && setIsAutoScroll(false)\n    }\n  }\n\n  useEffect(() => {\n    if (isAutoScroll) {\n      messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\n    }\n  }, [messages]) // eslint-disable-line\n\n  return (\n    <div\n      style={{ height: '400px', overflowY: 'auto' }}\n      onScroll={scrollHandler}\n    >\n      {messages.map(m => (\n        <Message key={m.id} message={m} />\n      ))}\n      <div ref={messagesAnchorRef}></div>\n    </div>\n  )\n}\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(\n  ({ message }) => {\n    return (\n      <div>\n        <img\n          style={{ width: '30px', height: 30 }}\n          src={message?.photo}\n          alt=\"\"\n        />\n        <br />\n        <b>{message?.userName}</b>\n        <sup>{message?.userId}</sup>\n        <br />\n        {message?.message}\n        <hr />\n      </div>\n    )\n  }\n)\n\nconst AddMessageForm: React.FC = () => {\n  const [message, setMessage] = useState('')\n  const status = useSelector((state: AppStateType) => state.chat?.status)\n  const dispatch = useDispatch()\n\n  const sendMessageHandler = () => {\n    if (!message) {\n      return\n    }\n    dispatch(sendMessagesListening(message))\n    setMessage('')\n  }\n\n  return (\n    <div>\n      <div>\n        <textarea\n          value={message}\n          onChange={e => setMessage(e.target.value)}\n        ></textarea>\n      </div>\n      <div>\n        <button disabled={status !== 'ready'} onClick={sendMessageHandler}>\n          Send\n        </button>\n      </div>\n    </div>\n  )\n}\n"],"sourceRoot":""}