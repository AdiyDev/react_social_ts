{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","s","message","src","alt","DialogItem","path","id","dialog","name","to","activeClassName","active","maxLength30","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","dialogsElements","dialogsPage","dialogs","map","d","messegesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,WAAa,4BAA4B,iBAAmB,kCAAkC,iBAAmB,oC,mFCkB9UC,EAZsB,SAAAC,GACnC,OACE,qBAAIC,UAAWC,IAAEC,QAAjB,UACE,qBACEC,IAAI,wFACJC,IAAI,KAEN,4BAAIL,EAAMG,c,QCWDG,EAhByB,SAAAN,GACtC,IAAMO,EAAO,YAAcP,EAAMQ,GAEjC,OACE,qBAAIP,UAAWC,IAAEO,OAAjB,UACE,qBACEL,IAAI,wFACJC,IAAKL,EAAMU,OAEb,cAAC,IAAD,CAASC,GAAIJ,EAAMK,gBAAiBV,IAAEW,OAAtC,SACGb,EAAMU,W,yBCVTI,EAAcC,YAAiB,IA0BtBC,cAAoC,CACjDC,KAAM,2BADOD,EAhBX,SAAAhB,GACF,OACE,sBAAMkB,SAAUlB,EAAMmB,aAAtB,SACE,gCACGC,YACC,qBACA,iBACA,CAACC,IAAUP,GACXQ,KAEF,yDCUOC,EAvBsB,SAAAvB,GACnC,IAAMwB,EAAkBxB,EAAMyB,YAAYC,QAAQC,KAAI,SAAAC,GAAC,OACrD,cAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBF,GAAIoB,EAAEpB,IAAZoB,EAAEpB,OAE7BqB,EAAmB7B,EAAMyB,YAAYK,SAASH,KAAI,SAAAI,GAAC,OACvD,cAAC,EAAD,CAAS5B,QAAS4B,EAAE5B,SAAc4B,EAAEvB,OAOtC,OACE,sBAAKP,UAAWC,IAAEwB,QAAlB,UACE,oBAAIzB,UAAWC,IAAE8B,aAAjB,SAAgCR,IAChC,qBAAIvB,UAAWC,IAAE4B,SAAjB,UACGD,EACD,cAAC,EAAD,CAAgBX,SATA,SAACe,GACrBjC,EAAMkC,YAAYD,EAAOE,0B,+CCpBvBC,EAA6B,SAACC,GAAD,MAChC,CACCC,OAAQD,EAAME,KAAKD,S,YCMRE,sBACbC,aAPsB,SAACJ,GACvB,MAAO,CACLZ,YAAaY,EAAMZ,eAKd,eAAuBiB,ODCzB,SACLC,GAoBA,OAVuCF,YAMrCL,EACA,GAPqCK,EAPrC,SAAAzC,GACE,IAAQsC,EAAyBtC,EAAzBsC,OAAWM,EAAnB,YAAiC5C,EAAjC,GACA,OAAKsC,EAEE,cAACK,EAAD,eAAuBC,IAFV,cAAC,IAAD,CAAUjC,GAAG,gBCRxB6B,CAGbjB","file":"static/js/5.41e5c1f9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2QICa\",\"dialogsItems\":\"Dialogs_dialogsItems__1-g1T\",\"dialog\":\"Dialogs_dialog__3u2C-\",\"active\":\"Dialogs_active__1ep-X\",\"messages\":\"Dialogs_messages__2dIN0\",\"message\":\"Dialogs_message__AV9Ys\",\"buttonBlue\":\"Dialogs_buttonBlue__Zytfd\",\"buttonBlueEffect\":\"Dialogs_buttonBlueEffect__3MT8n\",\"buttonBlueRotate\":\"Dialogs_buttonBlueRotate__IoFXA\"};","import React from 'react'\nimport s from './../Dialogs.module.css'\n\ntype PropsType = {\n  message: string\n}\n\nconst Message: React.FC<PropsType> = props => {\n  return (\n    <li className={s.message}>\n      <img\n        src=\"http://www.petplan.com.au/blog/wp-content/uploads/2016/12/pet-insurance-dog-cat-8.jpg\"\n        alt=\"\"\n      ></img>\n      <p>{props.message}</p>\n    </li>\n  )\n}\n\nexport default Message\n","import React from 'react'\nimport s from './../Dialogs.module.css'\nimport { NavLink } from 'react-router-dom'\n\ntype PropsType = {\n  id: number\n  name: string\n}\n\nconst DialogItem: React.FC<PropsType> = props => {\n  const path = '/dialogs/' + props.id\n\n  return (\n    <li className={s.dialog}>\n      <img\n        src=\"http://www.petplan.com.au/blog/wp-content/uploads/2016/12/pet-insurance-dog-cat-8.jpg\"\n        alt={props.name}\n      ></img>\n      <NavLink to={path} activeClassName={s.active}>\n        {props.name}\n      </NavLink>\n    </li>\n  )\n}\n\nexport default DialogItem\n","import React from 'react'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport { createField, Textarea } from '../../common/FormsControls/FormsControls'\nimport {\n  maxLengthCreator,\n  required\n} from '../../../utils/validators/validators'\nimport { NewMessageFormValuesType } from '../Dialogs'\n\nconst maxLength30 = maxLengthCreator(30)\n\ntype NewMessageFormValuesKeysType = Extract<\n  keyof NewMessageFormValuesType,\n  string\n>\n\ntype PropsType = {}\nconst AddMessageForm: React.FC<\n  InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType\n> = props => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        {createField<NewMessageFormValuesKeysType>(\n          'Enter your message',\n          'newMessageBody',\n          [required, maxLength30],\n          Textarea\n        )}\n        <button>add message</button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<NewMessageFormValuesType>({\n  form: 'dialog-add-message-form'\n})(AddMessageForm)\n","import React from 'react'\nimport s from './Dialogs.module.css'\nimport Message from './Message/Message'\nimport DialogItem from './DialogItem/DialogItem'\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\nimport { initialStateType } from '../../redux/dialogs-reducer'\n\ntype PropsType = {\n  dialogsPage: initialStateType\n  sendMessage: (messageText: string) => void\n}\n\nexport type NewMessageFormValuesType = {\n  newMessageBody: string\n}\n\nconst Dialogs: React.FC<PropsType> = props => {\n  const dialogsElements = props.dialogsPage.dialogs.map(d => (\n    <DialogItem name={d.name} key={d.id} id={d.id} />\n  ))\n  const messegesElements = props.dialogsPage.messages.map(m => (\n    <Message message={m.message} key={m.id} />\n  ))\n\n  const addNewMessage = (values: NewMessageFormValuesType) => {\n    props.sendMessage(values.newMessageBody)\n  }\n\n  return (\n    <div className={s.dialogs}>\n      <ul className={s.dialogsItems}>{dialogsElements}</ul>\n      <ul className={s.messages}>\n        {messegesElements}\n        <AddMessageForm onSubmit={addNewMessage} />\n      </ul>\n    </div>\n  )\n}\n\nexport default Dialogs\n","import React from 'react'\nimport { Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { AppStateType } from '../../redux/redux-store'\n\nconst mapStateToPropsForRedirect = (state: AppStateType) =>\n  ({\n    isAuth: state.auth.isAuth\n  } as MapPropsType)\n\ntype MapPropsType = {\n  isAuth: boolean\n}\ntype DispatchPropsType = {}\n\nexport function withAuthRedirect<WCP>(\n  WrappedComponent: React.ComponentType<WCP>\n) {\n  const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> =\n    props => {\n      const { isAuth, ...restProps } = props\n      if (!isAuth) return <Redirect to=\"/login\" />\n\n      return <WrappedComponent {...(restProps as WCP)} />\n    }\n\n  const ConnectedAuthRedirectComponent = connect<\n    MapPropsType,\n    DispatchPropsType,\n    WCP,\n    AppStateType\n  >(\n    mapStateToPropsForRedirect,\n    {}\n  )(RedirectComponent)\n\n  return ConnectedAuthRedirectComponent\n}\n","import Dialogs from './Dialogs'\nimport { actions } from '../../redux/dialogs-reducer'\nimport { connect } from 'react-redux'\nimport { withAuthRedirect } from '../hoc/withAuthRedirect'\nimport { compose } from 'redux'\nimport { AppStateType } from '../../redux/redux-store'\n\nconst mapStateToProps = (state: AppStateType) => {\n  return {\n    dialogsPage: state.dialogsPage\n  }\n}\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, { ...actions }),\n  withAuthRedirect\n)(Dialogs)\n"],"sourceRoot":""}