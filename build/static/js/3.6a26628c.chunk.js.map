{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","assets/images/userPhotoEmpty.jpg","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","onChange","e","currentTarget","value","updateStatus","onFocus","target","select","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","className","style","formSummaryError","createField","Input","type","Textarea","Object","keys","contacts","map","key","s","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","Preloader","profileInfoWrapper","imageBlock","src","alt","descriptionBlock","photos","large","userPhotoEmpty","width","height","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength30","maxLengthCreator","required","MyPosts","postsElements","posts","reverse","p","id","postsBlock","values","addPost","newPostText","MyPostsMemorized","React","memo","MyPostsContainer","connect","state","profilePage","actions","addPostActionCreator","Profile","profileWrapper","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","console","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.6a26628c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfoWrapper\":\"ProfileInfo_profileInfoWrapper__1Pelv\",\"imageBlock\":\"ProfileInfo_imageBlock__3_wPo\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3jsoS\",\"mainPhoto\":\"ProfileInfo_mainPhoto__3ov2R\",\"contact\":\"ProfileInfo_contact__3_Xqs\",\"minPhoto\":\"ProfileInfo_minPhoto__21zar\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__laui4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"MyPosts_posts__9ow1v\",\"postsBlock\":\"MyPosts_postsBlock__r7VTT\",\"myPostsBlock\":\"MyPosts_myPostsBlock__1LlWL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3Pzf7\"};","import React, { useState, useEffect, ChangeEvent } from 'react'\n\ntype PropsType = {\n  status: string\n  updateStatus: (status: string) => void\n}\n\nconst ProfileStatusWithHooks: React.FC<PropsType> = props => {\n  const [editMode, setEditMode] = useState(false)\n  const [status, setStatus] = useState(props.status)\n\n  useEffect(() => {\n    setStatus(props.status)\n  }, [props.status])\n\n  const activeteEditMode = () => {\n    setEditMode(true)\n  }\n\n  const deactiveteEditMode = () => {\n    setEditMode(false)\n  }\n\n  const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setStatus(e.currentTarget.value)\n    props.updateStatus(status)\n  }\n\n  const handleFocus = (e: ChangeEvent<HTMLInputElement>) => {\n    e.target.select()\n  }\n\n  return (\n    <ul>\n      {!editMode && (\n        <li>\n          <span onDoubleClick={activeteEditMode}>{status || '------'}</span>\n        </li>\n      )}\n      {editMode && (\n        <li>\n          <input\n            autoFocus={true}\n            onBlur={deactiveteEditMode}\n            onChange={onStatusChange}\n            onFocus={handleFocus}\n            value={status}\n          />\n        </li>\n      )}\n    </ul>\n  )\n}\n\nexport default ProfileStatusWithHooks\n","export default __webpack_public_path__ + \"static/media/userPhotoEmpty.b6e40cdf.jpg\";","import React from 'react'\nimport s from './ProfileInfo.module.css'\nimport {\n  createField,\n  GetStringKeys,\n  Input,\n  Textarea\n} from '../../common/FormsControls/FormsControls'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport style from '../../common/FormsControls/FormsControls.module.css'\nimport { ProfileType } from '../../../types/types'\n\ntype PropsType = {\n  profile: ProfileType\n}\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\n\nconst ProfileDataForm: React.FC<\n  InjectedFormProps<ProfileType, PropsType> & PropsType\n> = ({ handleSubmit, profile, error }) => {\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <button>save</button>\n      </div>\n      {error && <div className={style.formSummaryError}>{error}</div>}\n      <div>\n        <b>Full name</b>:{' '}\n        {createField<ProfileTypeKeys>('Full name', 'fullName', [], Input)}\n      </div>\n      <div>\n        <b>Looking for a job</b>:{' '}\n        {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {\n          type: 'checkbox'\n        })}\n      </div>\n\n      <div>\n        <b>My professional skills</b>:\n        {createField<ProfileTypeKeys>(\n          'My professional skills',\n          'lookingForAJobDescription',\n          [],\n          Textarea\n        )}\n      </div>\n\n      <div>\n        <b>About me</b>:{createField('About me', 'aboutMe', [], Textarea)}\n      </div>\n      <div>\n        <b>Contacts</b>:{' '}\n        {Object.keys(profile.contacts).map(key => {\n          return (\n            <div key={key} className={s.contact}>\n              <b>\n                {key}: {createField(key, 'contacts.' + key, [], Input)}\n              </b>\n            </div>\n          )\n        })}\n      </div>\n    </form>\n  )\n}\n\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({\n  form: 'edit-profile'\n})(ProfileDataForm)\n\nexport default ProfileDataFormReduxForm\n","import React, { useState, ChangeEvent } from 'react'\nimport s from './ProfileInfo.module.css'\nimport Preloader from '../../common/Preloader/Preloader'\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks'\nimport userPhotoEmpty from '../../../assets/images/userPhotoEmpty.jpg'\nimport ProfileDataForm from './ProfileDataForm'\nimport { ContactsType, ProfileType } from '../../../types/types'\nimport { Image } from 'antd'\n\ntype PropsType = {\n  profile: ProfileType | null\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst ProfileInfo: React.FC<PropsType> = ({\n  profile,\n  status,\n  updateStatus,\n  isOwner,\n  savePhoto,\n  saveProfile\n}) => {\n  const [editMode, setEditMode] = useState(false)\n\n  if (!profile) {\n    return <Preloader />\n  }\n\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files?.length) {\n      savePhoto(e.target.files[0])\n    }\n  }\n\n  const onSubmit = (formData: ProfileType) => {\n    saveProfile(formData).then(() => {\n      setEditMode(false)\n    })\n  }\n\n  return (\n    <ul className={s.profileInfoWrapper}>\n      <li className={s.imageBlock}>\n        <img\n          src=\"https://helpx.adobe.com/content/dam/help/en/photoshop/using/convert-color-image-black-white/jcr_content/main-pars/before_and_after/image-before/Landscape-Color.jpg\"\n          alt=\"Шапка профиля\"\n        ></img>\n      </li>\n      <li className={s.descriptionBlock}>\n        <Image\n          src={profile.photos.large || userPhotoEmpty}\n          style={{ width: '300px', height: '300px' }}\n          alt=\"\"\n        />\n        {isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\n\n        {editMode ? (\n          <ProfileDataForm\n            initialValues={profile}\n            profile={profile}\n            onSubmit={onSubmit}\n          />\n        ) : (\n          <ProfileData\n            goToEditMode={() => {\n              setEditMode(true)\n            }}\n            profile={profile}\n            isOwner={isOwner}\n          />\n        )}\n\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      </li>\n    </ul>\n  )\n}\n\ntype ProfileDataPropsType = {\n  profile: ProfileType\n  isOwner: boolean\n  goToEditMode: () => void\n}\n\nconst ProfileData: React.FC<ProfileDataPropsType> = ({\n  profile,\n  isOwner,\n  goToEditMode\n}) => {\n  return (\n    <div>\n      {isOwner && (\n        <div>\n          <button onClick={goToEditMode}>edit</button>\n        </div>\n      )}\n      <div>\n        <b>Full name</b>: {profile.fullName}\n      </div>\n      <div>\n        <b>Looking for a job</b>: {profile.lookingForAJob ? 'yes' : 'no'}\n      </div>\n      {profile.lookingForAJob && (\n        <div>\n          <b>My professional skills</b>: {profile.lookingForAJobDescription}\n        </div>\n      )}\n\n      <div>\n        <b>About me</b>: {profile.aboutMe}\n      </div>\n      <div>\n        <b>My professional skills</b>: {profile.lookingForAJobDescription}\n      </div>\n      <div>\n        <b>Contacts</b>:\n        {Object.keys(profile.contacts).map(key => {\n          return (\n            <Contact\n              key={key}\n              contactTitle={key}\n              contactValue={profile.contacts[key as keyof ContactsType]}\n            />\n          )\n        })}\n      </div>\n    </div>\n  )\n}\ntype ContactsPropsType = {\n  contactTitle: string\n  contactValue: string\n}\nconst Contact: React.FC<ContactsPropsType> = ({\n  contactTitle,\n  contactValue\n}) => {\n  return (\n    <div className={s.contact}>\n      <b>{contactTitle}</b>: {contactValue}\n    </div>\n  )\n}\n\nexport default ProfileInfo\n","import React from 'react'\nimport s from './Post.module.css'\n\ntype PropsType = {\n  message: string\n  likesCount: number\n}\n\nconst Post: React.FC<PropsType> = props => {\n  return (\n    <li className={s.item}>\n      <img\n        src=\"http://www.petplan.com.au/blog/wp-content/uploads/2016/12/pet-insurance-dog-cat-8.jpg\"\n        alt=\"\"\n      ></img>\n      {props.message}\n      <span>like </span>\n      {props.likesCount}\n    </li>\n  )\n}\n\nexport default Post\n","import React from 'react'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport {\n  createField,\n  GetStringKeys,\n  Input\n} from '../../../common/FormsControls/FormsControls'\nimport {\n  maxLengthCreator,\n  required\n} from '../../../../utils/validators/validators'\n\ntype PropsType = {}\nexport type AddPostFormValuesType = {\n  newPostText: string\n}\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\n\nconst maxLength30 = maxLengthCreator(30)\n\nconst AddPostForm: React.FC<\n  InjectedFormProps<AddPostFormValuesType, PropsType> & PropsType\n> = props => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        {createField<AddPostFormValuesTypeKeys>(\n          'Your post',\n          'newPostText',\n          [required, maxLength30],\n          Input\n        )}\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form>\n  )\n}\n\nexport default reduxForm<AddPostFormValuesType, PropsType>({\n  form: 'profile-add-post'\n})(AddPostForm)\n","import React from 'react'\nimport s from './MyPosts.module.css'\nimport Post from './Post/Post'\nimport AddPostForm, { AddPostFormValuesType } from './AddPostForm/AddPostForm'\nimport { PostType } from '../../../types/types'\n\nexport type MapPropsType = {\n  posts: Array<PostType>\n}\nexport type DispatchPropsType = {\n  addPost: (newPostText: string) => void\n}\n\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = props => {\n  const postsElements = [...props.posts]\n    .reverse()\n    .map(p => <Post key={p.id} message={p.message} likesCount={p.likesCount} />)\n\n  const onAddPost = (values: AddPostFormValuesType) => {\n    props.addPost(values.newPostText)\n  }\n\n  return (\n    <div className={s.postsBlock}>\n      <h3>My posts</h3>\n      <AddPostForm onSubmit={onAddPost} />\n      <div className={s.posts}>{postsElements}</div>\n    </div>\n  )\n}\n\nconst MyPostsMemorized = React.memo(MyPosts)\n\nexport default MyPostsMemorized\n","import MyPosts, { DispatchPropsType, MapPropsType } from './MyPosts'\nimport { connect } from 'react-redux'\nimport { actions } from '../../../redux/profile-reducer'\nimport { AppStateType } from '../../../redux/redux-store'\n\nconst mapStateToProps = (state: AppStateType) => {\n  return {\n    posts: state.profilePage.posts\n  }\n}\n\nconst MyPostsContainer = connect<\n  MapPropsType,\n  DispatchPropsType,\n  {},\n  AppStateType\n>(mapStateToProps, {\n  addPost: actions.addPostActionCreator\n})(MyPosts)\n\nexport default MyPostsContainer\n","import React from 'react'\nimport s from './Profile.module.css'\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\nimport MyPostsContainer from './MyPosts/MyPostsContainer'\nimport { ProfileType } from '../../types/types'\n\ntype PropsType = {\n  profile: ProfileType | null\n  status: string\n  updateStatus: (status: string) => void\n  isOwner: boolean\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\n\nconst Profile: React.FC<PropsType> = props => {\n  return (\n    <div className={s.profileWrapper}>\n      <ProfileInfo\n        isOwner={props.isOwner}\n        profile={props.profile}\n        status={props.status}\n        updateStatus={props.updateStatus}\n        saveProfile={props.saveProfile}\n        savePhoto={props.savePhoto}\n      />\n      <MyPostsContainer />\n    </div>\n  )\n}\n\nexport default Profile\n","import React from 'react'\nimport Profile from './Profile'\nimport { connect } from 'react-redux'\nimport {\n  getUserProfile,\n  getStatus,\n  updateStatus,\n  savePhoto,\n  saveProfile\n} from '../../redux/profile-reducer'\nimport { withRouter, RouteComponentProps } from 'react-router-dom'\nimport { compose } from 'redux'\nimport { AppStateType } from '../../redux/redux-store'\nimport { ProfileType } from '../../types/types'\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\ntype DispatchPropsType = {\n  getUserProfile: (userId: number) => void\n  getStatus: (userId: number) => void\n  updateStatus: (status: string) => void\n  savePhoto: (file: File) => void\n  saveProfile: (profile: ProfileType) => Promise<any>\n}\n\ntype PathParamsType = {\n  userId: string\n}\n\ntype PropsType = MapPropsType &\n  DispatchPropsType &\n  RouteComponentProps<PathParamsType>\n\nclass ProfileContainer extends React.Component<PropsType> {\n  refreshProfile() {\n    let userId: number | null = +this.props.match.params.userId\n    if (!userId) {\n      userId = this.props.authorizedUserId\n      if (!userId) {\n        this.props.history.push('/login')\n      }\n    }\n\n    if (!userId) {\n      console.error(\n        \"ID should exists in URI params or in state ('authorizedUserId')\"\n      )\n    } else {\n      this.props.getUserProfile(userId)\n      this.props.getStatus(userId)\n    }\n  }\n\n  componentDidMount() {\n    this.refreshProfile()\n  }\n\n  componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\n      this.refreshProfile()\n    }\n  }\n  render() {\n    return (\n      <Profile\n        {...this.props}\n        isOwner={!this.props.match.params.userId}\n        profile={this.props.profile}\n        status={this.props.status}\n        updateStatus={this.props.updateStatus}\n        savePhoto={this.props.savePhoto}\n      />\n    )\n  }\n}\n\nconst mapStateToProps = (state: AppStateType) => ({\n  profile: state.profilePage.profile,\n  status: state.profilePage.status,\n  authorizedUserId: state.auth.userId,\n  isAuth: state.auth.isAuth\n})\n\nexport default compose<React.ComponentType>(\n  connect(mapStateToProps, {\n    getUserProfile,\n    getStatus,\n    updateStatus,\n    savePhoto,\n    saveProfile\n  }),\n  withRouter\n)(ProfileContainer)\n"],"sourceRoot":""}